#!/bin/bash

# üîç SCRIPT DE VERIFICA√á√ÉO PR√â-DEPLOY
# ===================================

echo "üîç VERIFICANDO CONFIGURA√á√ïES PARA PRODU√á√ÉO..."
echo "=============================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Contador de problemas
ISSUES=0

echo -e "${BLUE}üìã 1. Verificando arquivos de configura√ß√£o...${NC}"

# Verificar se arquivos de deploy existem
if [ -f "railway.json" ]; then
    echo -e "${GREEN}‚úÖ railway.json encontrado${NC}"
else
    echo -e "${RED}‚ùå railway.json n√£o encontrado${NC}"
    ((ISSUES++))
fi

if [ -f "frontend/vercel.json" ]; then
    echo -e "${GREEN}‚úÖ frontend/vercel.json encontrado${NC}"
else
    echo -e "${RED}‚ùå frontend/vercel.json n√£o encontrado${NC}"
    ((ISSUES++))
fi

if [ -f "whatsapp-service/railway.json" ]; then
    echo -e "${GREEN}‚úÖ whatsapp-service/railway.json encontrado${NC}"
else
    echo -e "${RED}‚ùå whatsapp-service/railway.json n√£o encontrado${NC}"
    ((ISSUES++))
fi

if [ -f "backend/Dockerfile" ]; then
    echo -e "${GREEN}‚úÖ backend/Dockerfile encontrado${NC}"
else
    echo -e "${RED}‚ùå backend/Dockerfile n√£o encontrado${NC}"
    ((ISSUES++))
fi

if [ -f "whatsapp-service/Dockerfile" ]; then
    echo -e "${GREEN}‚úÖ whatsapp-service/Dockerfile encontrado${NC}"
else
    echo -e "${RED}‚ùå whatsapp-service/Dockerfile n√£o encontrado${NC}"
    ((ISSUES++))
fi

echo ""
echo -e "${BLUE}üìã 2. Verificando vari√°veis de ambiente...${NC}"

# Verificar se backend usa vari√°veis de ambiente
if grep -q "os.environ\|WHATSAPP_SERVICE_URL\|MONGO_URL" backend/server.py; then
    echo -e "${GREEN}‚úÖ Backend usa vari√°veis de ambiente${NC}"
else
    echo -e "${RED}‚ùå Backend n√£o est√° usando vari√°veis de ambiente${NC}"
    ((ISSUES++))
fi

# Verificar se WhatsApp service usa vari√°veis de ambiente
if grep -q "process.env\|FASTAPI_URL" whatsapp-service/server.js; then
    echo -e "${GREEN}‚úÖ WhatsApp Service usa vari√°veis de ambiente${NC}"
else
    echo -e "${RED}‚ùå WhatsApp Service n√£o est√° usando vari√°veis de ambiente${NC}"
    ((ISSUES++))
fi

# Verificar se frontend usa vari√°veis de ambiente
if grep -q "import.meta.env\|REACT_APP_BACKEND_URL" frontend/src/components/WhatsAppSection.tsx; then
    echo -e "${GREEN}‚úÖ Frontend usa vari√°veis de ambiente${NC}"
else
    echo -e "${RED}‚ùå Frontend n√£o est√° usando vari√°veis de ambiente${NC}"
    ((ISSUES++))
fi

echo ""
echo -e "${BLUE}üìã 3. Verificando URLs hardcoded...${NC}"

# Verificar se n√£o h√° URLs hardcoded problem√°ticas
if grep -r "localhost\|127.0.0.1" backend/ --exclude-dir=__pycache__ | grep -v "fallback\|default\|example"; then
    echo -e "${YELLOW}‚ö†Ô∏è  URLs localhost encontradas no backend (verifique se s√£o fallbacks)${NC}"
else
    echo -e "${GREEN}‚úÖ Backend sem URLs localhost problem√°ticas${NC}"
fi

if grep -r "localhost\|127.0.0.1" whatsapp-service/ --exclude-dir=node_modules | grep -v "fallback\|default\|example"; then
    echo -e "${YELLOW}‚ö†Ô∏è  URLs localhost encontradas no WhatsApp service (verifique se s√£o fallbacks)${NC}"
else
    echo -e "${GREEN}‚úÖ WhatsApp Service sem URLs localhost problem√°ticas${NC}"
fi

echo ""
echo -e "${BLUE}üìã 4. Verificando depend√™ncias...${NC}"

# Verificar se requirements.txt existe
if [ -f "backend/requirements.txt" ]; then
    echo -e "${GREEN}‚úÖ backend/requirements.txt existe${NC}"
else
    echo -e "${RED}‚ùå backend/requirements.txt n√£o encontrado${NC}"
    ((ISSUES++))
fi

# Verificar se package.json existe
if [ -f "whatsapp-service/package.json" ]; then
    echo -e "${GREEN}‚úÖ whatsapp-service/package.json existe${NC}"
else
    echo -e "${RED}‚ùå whatsapp-service/package.json n√£o encontrado${NC}"
    ((ISSUES++))
fi

if [ -f "frontend/package.json" ]; then
    echo -e "${GREEN}‚úÖ frontend/package.json existe${NC}"
else
    echo -e "${RED}‚ùå frontend/package.json n√£o encontrado${NC}"
    ((ISSUES++))
fi

echo ""
echo -e "${BLUE}üìã 5. Verificando CLIs...${NC}"

if command -v railway &> /dev/null; then
    echo -e "${GREEN}‚úÖ Railway CLI instalada$(NC)"
else
    echo -e "${RED}‚ùå Railway CLI n√£o instalada (npm install -g @railway/cli)${NC}"
    ((ISSUES++))
fi

if command -v vercel &> /dev/null; then
    echo -e "${GREEN}‚úÖ Vercel CLI instalada${NC}"
else
    echo -e "${RED}‚ùå Vercel CLI n√£o instalada (npm install -g vercel)${NC}"
    ((ISSUES++))
fi

echo ""
echo "=============================================="

if [ $ISSUES -eq 0 ]; then
    echo -e "${GREEN}üéâ TODAS AS VERIFICA√á√ïES PASSARAM!${NC}"
    echo -e "${GREEN}‚úÖ Sistema pronto para deploy em produ√ß√£o${NC}"
    echo ""
    echo -e "${BLUE}üìã Pr√≥ximos passos:${NC}"
    echo "1. Execute: ./deploy-production.sh"
    echo "2. Configure as vari√°veis de ambiente conforme solicitado"
    echo "3. Teste as URLs ap√≥s deploy"
else
    echo -e "${RED}‚ùå $ISSUES PROBLEMAS ENCONTRADOS!${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Corrija os problemas antes de fazer deploy${NC}"
    exit 1
fi