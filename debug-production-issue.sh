#!/bin/bash

# üî¨ TESTE DIAGN√ìSTICO COMPLETO - PROBLEMAS EM PRODU√á√ÉO
# =====================================================

echo "üî¨ DIAGN√ìSTICO AVAN√áADO DO PROBLEMA"
echo "=================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üìã 1. Informa√ß√µes do usu√°rio...${NC}"
echo "Seu frontend Vercel: https://500-kkskt06g-andressabgomes10-9056s-projects.vercel.app"
echo ""

# Pedir URLs do usu√°rio
echo -e "${YELLOW}Digite suas URLs de produ√ß√£o para teste:${NC}"
read -p "üîó URL do Backend Railway (ex: https://backend-production-xxxx.up.railway.app): " BACKEND_URL
read -p "üîó URL do WhatsApp Service Railway (ex: https://whatsapp-production-xxxx.up.railway.app): " WHATSAPP_URL

echo ""
echo -e "${BLUE}üìã 2. Testando conectividade b√°sica...${NC}"

# Teste Backend
echo -n "üß™ Testando backend b√°sico... "
BACKEND_TEST=$(curl -s --max-time 10 "$BACKEND_URL/api/" 2>/dev/null)
if [[ "$BACKEND_TEST" == *"Hello World"* ]]; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    BACKEND_OK=true
else
    echo -e "${RED}‚ùå FALHOU${NC}"
    echo -e "${YELLOW}   Resposta: $BACKEND_TEST${NC}"
    BACKEND_OK=false
fi

# Teste WhatsApp Service
echo -n "üß™ Testando WhatsApp service... "
WHATSAPP_TEST=$(curl -s --max-time 10 "$WHATSAPP_URL/status" 2>/dev/null)
if [[ "$WHATSAPP_TEST" == *"connected"* ]] || [[ "$WHATSAPP_TEST" == *"status"* ]]; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    WHATSAPP_OK=true
else
    echo -e "${RED}‚ùå FALHOU${NC}"
    echo -e "${YELLOW}   Resposta: $WHATSAPP_TEST${NC}"
    WHATSAPP_OK=false
fi

echo ""
echo -e "${BLUE}üìã 3. Testando integra√ß√£o backend ‚Üí whatsapp...${NC}"

echo -n "üîó Testando integra√ß√£o... "
INTEGRATION_TEST=$(curl -s --max-time 10 "$BACKEND_URL/api/whatsapp/status" 2>/dev/null)
if [[ "$INTEGRATION_TEST" == *"connected"* ]] || [[ "$INTEGRATION_TEST" == *"status"* ]]; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    INTEGRATION_OK=true
else
    echo -e "${RED}‚ùå FALHOU${NC}"
    echo -e "${YELLOW}   Resposta: $INTEGRATION_TEST${NC}"
    INTEGRATION_OK=false
fi

echo ""
echo -e "${BLUE}üìã 4. Testando CORS do frontend...${NC}"

echo -n "üåê Testando CORS... "
CORS_TEST=$(curl -s --max-time 10 -H "Origin: https://500-kkskt06g-andressabgomes10-9056s-projects.vercel.app" \
                -H "Access-Control-Request-Method: GET" \
                -H "Access-Control-Request-Headers: X-Requested-With" \
                -X OPTIONS "$BACKEND_URL/api/whatsapp/status" 2>/dev/null)

if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    CORS_OK=true
else
    echo -e "${RED}‚ùå FALHOU${NC}"
    CORS_OK=false
fi

echo ""
echo -e "${BLUE}üìã 5. Diagn√≥stico e solu√ß√µes...${NC}"
echo ""

if [[ "$BACKEND_OK" == false ]]; then
    echo -e "${RED}‚ùå PROBLEMA: Backend n√£o est√° respondendo${NC}"
    echo -e "${YELLOW}üí° SOLU√á√ÉO:${NC}"
    echo "   1. Verifique se o backend foi deployado no Railway"
    echo "   2. Teste manualmente: $BACKEND_URL/api/"
    echo "   3. Verifique logs no Railway Dashboard"
    echo ""
fi

if [[ "$WHATSAPP_OK" == false ]]; then
    echo -e "${RED}‚ùå PROBLEMA: WhatsApp Service n√£o est√° respondendo${NC}"
    echo -e "${YELLOW}üí° SOLU√á√ÉO:${NC}"
    echo "   1. Verifique se o WhatsApp service foi deployado no Railway"
    echo "   2. Teste manualmente: $WHATSAPP_URL/status"
    echo "   3. Verifique logs no Railway Dashboard"
    echo ""
fi

if [[ "$INTEGRATION_OK" == false ]] && [[ "$BACKEND_OK" == true ]]; then
    echo -e "${RED}‚ùå PROBLEMA: Backend n√£o consegue acessar WhatsApp Service${NC}"
    echo -e "${YELLOW}üí° SOLU√á√ÉO:${NC}"
    echo "   1. Verifique a vari√°vel WHATSAPP_SERVICE_URL no backend Railway"
    echo "   2. Deve ser: $WHATSAPP_URL"
    echo "   3. Redeploy o backend ap√≥s atualizar"
    echo ""
fi

if [[ "$CORS_OK" == false ]] && [[ "$BACKEND_OK" == true ]]; then
    echo -e "${RED}‚ùå PROBLEMA: CORS n√£o configurado corretamente${NC}"
    echo -e "${YELLOW}üí° SOLU√á√ÉO:${NC}"
    echo "   1. Verifique se o backend tem CORS configurado para *.vercel.app"
    echo "   2. O c√≥digo j√° est√° correto, pode ser problema de deploy"
    echo ""
fi

echo -e "${BLUE}üìã 6. Vari√°veis de ambiente corretas...${NC}"
echo ""
echo -e "${YELLOW}üîß Vercel - Environment Variables:${NC}"
echo "Nome da vari√°vel: REACT_APP_BACKEND_URL"
echo "Valor correto: $BACKEND_URL"
echo ""
echo -e "${YELLOW}üîß ALTERNATIVAS para testar na Vercel:${NC}"
echo "1. REACT_APP_BACKEND_URL=$BACKEND_URL"
echo "2. VITE_REACT_APP_BACKEND_URL=$BACKEND_URL" 
echo "3. VITE_BACKEND_URL=$BACKEND_URL"
echo ""
echo -e "${BLUE}üí° DICA: Teste todas as 3 vari√°veis na Vercel para garantir${NC}"

echo ""
echo "=================================="
if [[ "$BACKEND_OK" == true ]] && [[ "$INTEGRATION_OK" == true ]]; then
    echo -e "${GREEN}üéâ SERVI√áOS FUNCIONANDO! O problema √© s√≥ a vari√°vel de ambiente na Vercel.${NC}"
else
    echo -e "${RED}‚ö†Ô∏è  PROBLEMA NOS SERVI√áOS! Corrija os servi√ßos antes da vari√°vel de ambiente.${NC}"
fi
echo "=================================="